%% File : IMUParser.tlc
%% Created : Tue Apr 30 11:49:11 2024
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "IMUParser.cpp".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  IMUParser "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) void
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "IMUParser_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void IMUParser_Outputs_wrapper_accel(const %<uint8Type> *u0,
			const %<doubleType> *mem,
			const %<uint8Type> *buffin,
			%<doubleType> *samp,
			%<doubleType> *theta,
			%<doubleType> *omega,
			%<doubleType> *acc,
			%<doubleType> *IMUtemp,
			%<uint8Type> *RcvAck,
			%<doubleType> *memout,
			%<uint8Type> *buffer);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "IMUParser_accel_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    #include "%<hFileName>.h"
    

    extern void IMUParser_Start_wrapper(void);
    extern void IMUParser_Outputs_wrapper(const %<uint8Type> *u0,
			const %<doubleType> *mem,
			const %<uint8Type> *buffin,
			%<doubleType> *samp,
			%<doubleType> *theta,
			%<doubleType> *omega,
			%<doubleType> *acc,
			%<doubleType> *IMUtemp,
			%<uint8Type> *RcvAck,
			%<doubleType> *memout,
			%<uint8Type> *buffer);
    extern void IMUParser_Terminate_wrapper(void);
    void IMUParser_Outputs_wrapper_accel(const %<uint8Type> *u0,
			const %<doubleType> *mem,
			const %<uint8Type> *buffin,
			%<doubleType> *samp,
			%<doubleType> *theta,
			%<doubleType> *omega,
			%<doubleType> *acc,
			%<doubleType> *IMUtemp,
			%<uint8Type> *RcvAck,
			%<doubleType> *memout,
			%<uint8Type> *buffer){
    IMUParser_Outputs_wrapper(u0,
			mem,
			buffin,
			samp,
			theta,
			omega,
			acc,
			IMUtemp,
			RcvAck,
			memout,
			buffer);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
    %assign hFileName = "IMUParser_cgen_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void IMUParser_Outputs_wrapper_cgen(const %<uint8Type> *u0,
			const %<doubleType> *mem,
			const %<uint8Type> *buffin,
			%<doubleType> *samp,
			%<doubleType> *theta,
			%<doubleType> *omega,
			%<doubleType> *acc,
			%<doubleType> *IMUtemp,
			%<uint8Type> *RcvAck,
			%<doubleType> *memout,
			%<uint8Type> *buffer);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "IMUParser_cgen_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    %<LibEmitPlatformTypeIncludes()>
    #endif
    #include "%<hFileName>.h"

	extern void IMUParser_Outputs_wrapper(const %<uint8Type> *u0,
			const %<doubleType> *mem,
			const %<uint8Type> *buffin,
			%<doubleType> *samp,
			%<doubleType> *theta,
			%<doubleType> *omega,
			%<doubleType> *acc,
			%<doubleType> *IMUtemp,
			%<uint8Type> *RcvAck,
			%<doubleType> *memout,
			%<uint8Type> *buffer);
	 void IMUParser_Outputs_wrapper_cgen(const %<uint8Type> *u0,
			const %<doubleType> *mem,
			const %<uint8Type> *buffin,
			%<doubleType> *samp,
			%<doubleType> *theta,
			%<doubleType> *omega,
			%<doubleType> *acc,
			%<doubleType> *IMUtemp,
			%<uint8Type> *RcvAck,
			%<doubleType> *memout,
			%<uint8Type> *buffer) {
	IMUParser_Outputs_wrapper(u0,
			mem,
			buffin,
			samp,
			theta,
			omega,
			acc,
			IMUtemp,
			RcvAck,
			memout,
			buffer);
	}
    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void IMUParser_Start_wrapper(void);

    SFB_EXTERN_C void IMUParser_Outputs_wrapper(const %<uint8Type> *u0,
			const %<doubleType> *mem,
			const %<uint8Type> *buffin,
			%<doubleType> *samp,
			%<doubleType> *theta,
			%<doubleType> *omega,
			%<doubleType> *acc,
			%<doubleType> *IMUtemp,
			%<uint8Type> *RcvAck,
			%<doubleType> *memout,
			%<uint8Type> *buffer);

    SFB_EXTERN_C void IMUParser_Terminate_wrapper(void);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign py6 = LibBlockOutputSignalAddr(6, "", "", 0)
  %assign py7 = LibBlockOutputSignalAddr(7, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    IMUParser_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<pu2>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>);
  %else
    IMUParser_Outputs_wrapper_cgen(%<pu0>, %<pu1>, %<pu2>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>);
  %endif

  %%
%endfunction


%% [EOF] IMUParser.tlc

